// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/service/hotel.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/kirananto/review-system/internal/api/dto"
	response "github.com/kirananto/review-system/internal/api/response"
	models "github.com/kirananto/review-system/internal/models"
)

// MockHotelService is a mock of HotelService interface.
type MockHotelService struct {
	ctrl     *gomock.Controller
	recorder *MockHotelServiceMockRecorder
}

// MockHotelServiceMockRecorder is the mock recorder for MockHotelService.
type MockHotelServiceMockRecorder struct {
	mock *MockHotelService
}

// NewMockHotelService creates a new mock instance.
func NewMockHotelService(ctrl *gomock.Controller) *MockHotelService {
	mock := &MockHotelService{ctrl: ctrl}
	mock.recorder = &MockHotelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHotelService) EXPECT() *MockHotelServiceMockRecorder {
	return m.recorder
}

// CreateHotel mocks base method.
func (m *MockHotelService) CreateHotel(hotel *dto.HotelRequestBody) (*models.Hotel, *response.ErrorDetails) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHotel", hotel)
	ret0, _ := ret[0].(*models.Hotel)
	ret1, _ := ret[1].(*response.ErrorDetails)
	return ret0, ret1
}

// CreateHotel indicates an expected call of CreateHotel.
func (mr *MockHotelServiceMockRecorder) CreateHotel(hotel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHotel", reflect.TypeOf((*MockHotelService)(nil).CreateHotel), hotel)
}

// DeleteHotel mocks base method.
func (m *MockHotelService) DeleteHotel(id uint) *response.ErrorDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHotel", id)
	ret0, _ := ret[0].(*response.ErrorDetails)
	return ret0
}

// DeleteHotel indicates an expected call of DeleteHotel.
func (mr *MockHotelServiceMockRecorder) DeleteHotel(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHotel", reflect.TypeOf((*MockHotelService)(nil).DeleteHotel), id)
}

// GetHotelByID mocks base method.
func (m *MockHotelService) GetHotelByID(id uint) (*models.Hotel, *response.ErrorDetails) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelByID", id)
	ret0, _ := ret[0].(*models.Hotel)
	ret1, _ := ret[1].(*response.ErrorDetails)
	return ret0, ret1
}

// GetHotelByID indicates an expected call of GetHotelByID.
func (mr *MockHotelServiceMockRecorder) GetHotelByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelByID", reflect.TypeOf((*MockHotelService)(nil).GetHotelByID), id)
}

// GetHotelsList mocks base method.
func (m *MockHotelService) GetHotelsList(queryParam *dto.HotelsQueryParams) ([]*models.Hotel, int, *response.ErrorDetails) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelsList", queryParam)
	ret0, _ := ret[0].([]*models.Hotel)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*response.ErrorDetails)
	return ret0, ret1, ret2
}

// GetHotelsList indicates an expected call of GetHotelsList.
func (mr *MockHotelServiceMockRecorder) GetHotelsList(queryParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelsList", reflect.TypeOf((*MockHotelService)(nil).GetHotelsList), queryParam)
}

// UpdateHotel mocks base method.
func (m *MockHotelService) UpdateHotel(id uint, hotel *dto.HotelRequestBody) (*models.Hotel, *response.ErrorDetails) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHotel", id, hotel)
	ret0, _ := ret[0].(*models.Hotel)
	ret1, _ := ret[1].(*response.ErrorDetails)
	return ret0, ret1
}

// UpdateHotel indicates an expected call of UpdateHotel.
func (mr *MockHotelServiceMockRecorder) UpdateHotel(id, hotel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHotel", reflect.TypeOf((*MockHotelService)(nil).UpdateHotel), id, hotel)
}
