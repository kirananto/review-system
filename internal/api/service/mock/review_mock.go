// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/service/review.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	review "github.com/kirananto/review-system/pkg/review"
)

// MockReviewService is a mock of ReviewService interface.
type MockReviewService struct {
	ctrl     *gomock.Controller
	recorder *MockReviewServiceMockRecorder
}

// MockReviewServiceMockRecorder is the mock recorder for MockReviewService.
type MockReviewServiceMockRecorder struct {
	mock *MockReviewService
}

// NewMockReviewService creates a new mock instance.
func NewMockReviewService(ctrl *gomock.Controller) *MockReviewService {
	mock := &MockReviewService{ctrl: ctrl}
	mock.recorder = &MockReviewServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewService) EXPECT() *MockReviewServiceMockRecorder {
	return m.recorder
}

// CreateReview mocks base method.
func (m *MockReviewService) CreateReview(ctx context.Context, review *review.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", ctx, review)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockReviewServiceMockRecorder) CreateReview(ctx, review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockReviewService)(nil).CreateReview), ctx, review)
}

// DeleteReview mocks base method.
func (m *MockReviewService) DeleteReview(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockReviewServiceMockRecorder) DeleteReview(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockReviewService)(nil).DeleteReview), ctx, id)
}

// GetReviewByID mocks base method.
func (m *MockReviewService) GetReviewByID(ctx context.Context, id uint) (*review.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewByID", ctx, id)
	ret0, _ := ret[0].(*review.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewByID indicates an expected call of GetReviewByID.
func (mr *MockReviewServiceMockRecorder) GetReviewByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewByID", reflect.TypeOf((*MockReviewService)(nil).GetReviewByID), ctx, id)
}

// GetReviews mocks base method.
func (m *MockReviewService) GetReviews(ctx context.Context) ([]*review.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviews", ctx)
	ret0, _ := ret[0].([]*review.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviews indicates an expected call of GetReviews.
func (mr *MockReviewServiceMockRecorder) GetReviews(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviews", reflect.TypeOf((*MockReviewService)(nil).GetReviews), ctx)
}

// ProcessReviews mocks base method.
func (m *MockReviewService) ProcessReviews(ctx context.Context, reader io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessReviews", ctx, reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessReviews indicates an expected call of ProcessReviews.
func (mr *MockReviewServiceMockRecorder) ProcessReviews(ctx, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessReviews", reflect.TypeOf((*MockReviewService)(nil).ProcessReviews), ctx, reader)
}

// UpdateReview mocks base method.
func (m *MockReviewService) UpdateReview(ctx context.Context, review *review.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", ctx, review)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockReviewServiceMockRecorder) UpdateReview(ctx, review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockReviewService)(nil).UpdateReview), ctx, review)
}
